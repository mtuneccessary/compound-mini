"use client"

import { useEffect, useMemo, useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { formatCurrency, formatDate } from "@/lib/utils"
import { ArrowUpRight, ArrowDownLeft, Clock } from "lucide-react"
import { CryptoIcon } from "./crypto-icon"
import { useAccount } from "wagmi"
import { publicClient, COMET_ADDRESS } from "@/lib/comet-onchain"

interface TxItem {
	type: "supply" | "withdraw"
	asset: string
	amount: number
	timestamp: number
	hash: `0x${string}`
}

const supplyEvent: any = {
	type: "event",
	name: "Supply",
	inputs: [
		{ name: "from", type: "address", indexed: true },
		{ name: "to", type: "address", indexed: true },
		{ name: "asset", type: "address", indexed: true },
		{ name: "amount", type: "uint256" },
	],
}

const withdrawEvent: any = {
	type: "event",
	name: "Withdraw",
	inputs: [
		{ name: "from", type: "address", indexed: true },
		{ name: "to", type: "address", indexed: true },
		{ name: "asset", type: "address", indexed: true },
		{ name: "amount", type: "uint256" },
	],
}

export function TransactionHistory() {
	const { address, isConnected } = useAccount()
	const [mounted, setMounted] = useState(false)
	const [items, setItems] = useState<TxItem[]>([])
	const [baseToken, setBaseToken] = useState<`0x${string}` | null>(null)
	const [weth, setWeth] = useState<`0x${string}` | null>(null)

	useEffect(() => setMounted(true), [])
	const user = useMemo(() => (address ? (address as `0x${string}`) : undefined), [address])

	useEffect(() => {
		// load addresses used for symbol mapping
		(async () => {
			try {
				const base = (await publicClient.readContract({ address: COMET_ADDRESS, abi: [
					{ type: "function", name: "baseToken", stateMutability: "view", inputs: [], outputs: [{ type: "address" }] },
				] as any, functionName: "baseToken", args: [] })) as `0x${string}`
				setBaseToken(base)
				const wethAddr = (process.env.NEXT_PUBLIC_WETH_ADDRESS as `0x${string}`) || ("0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2" as `0x${string}`)
				setWeth(wethAddr)
			} catch {}
		})()
	}, [])

	useEffect(() => {
		async function loadLogs() {
			try {
				if (!user || !isConnected) { setItems([]); return }
				const fromBlock = BigInt(0)
				const [supFrom, supTo, wdFrom, wdTo] = await Promise.all([
					publicClient.getLogs({ address: COMET_ADDRESS, event: supplyEvent, fromBlock, toBlock: "latest", args: { from: user } } as any),
					publicClient.getLogs({ address: COMET_ADDRESS, event: supplyEvent, fromBlock, toBlock: "latest", args: { to: user } } as any),
					publicClient.getLogs({ address: COMET_ADDRESS, event: withdrawEvent, fromBlock, toBlock: "latest", args: { from: user } } as any),
					publicClient.getLogs({ address: COMET_ADDRESS, event: withdrawEvent, fromBlock, toBlock: "latest", args: { to: user } } as any),
				])

				const blocks = new Map<string, number>()
				const blockTs = async (bn: bigint) => {
					const k = bn.toString()
					if (blocks.has(k)) return blocks.get(k) as number
					const b = await publicClient.getBlock({ blockNumber: bn })
					const ts = Number(b.timestamp)
					blocks.set(k, ts)
					return ts
				}

				const allLogs: any[] = [...(supFrom as any[]), ...(supTo as any[]), ...(wdFrom as any[]), ...(wdTo as any[])]
				const parsed: TxItem[] = []
				for (const l of allLogs) {
					const kind: "supply" | "withdraw" = l.eventName === "Withdraw" ? "withdraw" : "supply"
					const amt = Number(l.args.amount) / 1e18
					const assetAddr = (l.args.asset as string).toLowerCase()
					let sym = "TOKEN"
					if (weth && assetAddr === weth.toLowerCase()) sym = "WETH"
					else if (baseToken && assetAddr === baseToken.toLowerCase()) sym = "USDC"
					parsed.push({ type: kind, asset: sym, amount: amt, timestamp: await blockTs(l.blockNumber!), hash: l.transactionHash! })
				}
				parsed.sort((a, b) => b.timestamp - a.timestamp)
				setItems(parsed)
			} catch {
				setItems([])
			}
		}
		loadLogs()
	}, [user, isConnected, baseToken, weth])

	if (!mounted) return null

	const getTransactionIcon = (type: string) => {
		switch (type) {
			case "supply":
				return <ArrowUpRight className="h-4 w-4 text-green-500" />
			case "withdraw":
				return <ArrowDownLeft className="h-4 w-4 text-yellow-500" />
			default:
				return <Clock className="h-4 w-4 text-gray-500" />
		}
	}

	const getTransactionBg = (type: string) => {
		switch (type) {
			case "supply":
				return "bg-green-900/30"
			case "withdraw":
				return "bg-yellow-900/30"
			default:
				return "bg-gray-900/30"
		}
	}

	const getTransactionLabel = (type: string) => {
		switch (type) {
			case "supply":
				return "Supplied"
			case "withdraw":
				return "Withdrawn"
			default:
				return "Unknown"
		}
	}

	const getTransactionPrefix = (type: string) => {
		switch (type) {
			case "supply":
				return "+"
			case "withdraw":
				return "-"
			default:
				return ""
		}
	}

	return (
		<div className="p-4 pb-24">
			<Card className="bg-[#1a1d26] border-[#2a2d36] text-white">
				<CardHeader>
					<CardTitle className="text-xl">Transaction History</CardTitle>
					<CardDescription className="text-gray-400">Your recent activities</CardDescription>
				</CardHeader>
				<CardContent>
					{!isConnected ? (
						<div className="text-center py-8 text-gray-400">
							<Clock className="mx-auto h-8 w-8 mb-2 opacity-50" />
							<p>Connect your wallet to view activity</p>
						</div>
					) : items.length === 0 ? (
						<div className="text-center py-8 text-gray-400">
							<Clock className="mx-auto h-8 w-8 mb-2 opacity-50" />
							<p>No transactions yet</p>
						</div>
					) : (
						<div className="space-y-3">
							{items.map((tx) => (
								<div key={tx.hash} className="bg-[#252836] p-3 rounded-lg">
									<div className="flex items-center justify-between">
										<div className="flex items-center gap-3">
											<div className="flex items-center gap-2">
												<div className={`${getTransactionBg(tx.type)} p-2 rounded-full`}>
													{getTransactionIcon(tx.type)}
												</div>
												<CryptoIcon symbol={tx.asset} size={20} />
											</div>
											<div>
												<div className="font-medium">
													{getTransactionLabel(tx.type)} {tx.asset}
												</div>
												<div className="text-xs text-gray-400">{formatDate(tx.timestamp)}</div>
											</div>
										</div>
										<div className="text-right">
											<div className="font-medium">
												{getTransactionPrefix(tx.type)}
												{formatCurrency(tx.amount, tx.asset)}
											</div>
										</div>
									</div>
								</div>
							))}
						</div>
					)}
				</CardContent>
			</Card>
		</div>
	)
}
